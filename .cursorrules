# Cursor Rules for Music Soup - Project Organization & Maintenance

## 🎯 Project Overview
This is a Node.js automation that syncs Apple Music and Spotify playlists into a Notion database. All code should align with the PRD requirements for flexibility, modularity, and API safety.

## 📁 MANDATORY Directory Structure
Enforce the following project organization at ALL TIMES:

```
/
├── 📋 CORE APPLICATION (Root Level Only)
│   ├── config.js                 # Centralized environment variable access
│   ├── endpoints.js              # All API endpoint constants  
│   ├── schema.js                 # Notion schema and response field definitions
│   ├── spotifyClient.js          # Spotify API integration only
│   ├── appleMusicClient.js       # Apple Music API integration only
│   ├── notionClient.js           # Notion API integration only
│   ├── syncOrchestrator.js       # Main orchestration logic
│   ├── sync.js                   # Entry point for sync operations
│   └── webhook-server.js         # Webhook server for external integrations
│
├── 🛠️ scripts/                   # ALL utility and debug scripts
│   ├── get-spotify-token.js      # OAuth token generation
│   ├── get-apple-music-user-token.js  # Apple Music user token helper
│   ├── debug-config.js           # Configuration validation
│   ├── debug-apple-key.js        # Apple Music key debugging
│   └── [any new utility scripts] # Future one-off helpers
│
├── 🧪 tests/                     # ALL test files
│   ├── integration-test.js       # API integration testing
│   ├── spotify.test.js           # Spotify client tests (when created)
│   ├── appleMusic.test.js        # Apple Music client tests (when created)
│   └── notion.test.js            # Notion client tests (when created)
│
├── 🔧 utils/                     # Shared utilities only
│   ├── logger.js                 # Central logging
│   └── [shared helpers only]     # Deduplication, date formatting, etc.
│
├── 📚 docs/                      # ALL documentation
│   ├── project-structure.md      # This structure guide
│   ├── setup.md                  # Setup instructions
│   ├── webhook-setup.md          # Webhook configuration
│   ├── flyio-setup.md            # Deployment guide
│   ├── initial-prd.md            # Original requirements
│   ├── internal-readme.md        # Development notes
│   └── [any new documentation]   # Future docs go here
│
├── 🚀 deployment/                # ALL deployment files
│   ├── Dockerfile                # Container configuration
│   ├── fly.toml                  # Fly.io settings
│   └── [platform configs]       # Future deployment configs
│
└── ⚙️ .github/workflows/         # GitHub Actions only
    └── sync-music.yml            # Automated workflows
```

## 🚫 FILE PLACEMENT RULES - NEVER VIOLATE

### ❌ FORBIDDEN in Root Directory:
- ❌ Debug scripts (use `scripts/`)
- ❌ Test files (use `tests/`)
- ❌ Documentation files (use `docs/`)
- ❌ Deployment configs except package.json (use `deployment/`)
- ❌ Utility scripts (use `scripts/`)
- ❌ Any temporary files (clean up immediately)

### ✅ REQUIRED File Placement:

#### Core Application Files (Root Only):
- ✅ API clients: `*Client.js` in root
- ✅ Main logic: `syncOrchestrator.js`, `sync.js` in root
- ✅ Configuration: `config.js`, `endpoints.js`, `schema.js` in root
- ✅ Server: `webhook-server.js` in root

#### Scripts Directory (`scripts/`):
- ✅ ALL debugging scripts (`debug-*.js`)
- ✅ ALL token generation scripts (`get-*-token.js`)
- ✅ ALL one-off utilities and helpers
- ✅ Scripts README.md

#### Tests Directory (`tests/`):
- ✅ ALL test files (`*.test.js`, `integration-test.js`)
- ✅ ALL mock data and fixtures
- ✅ ALL testing utilities

#### Documentation Directory (`docs/`):
- ✅ ALL markdown files except main README.md
- ✅ ALL setup and configuration guides
- ✅ ALL internal documentation
- ✅ ALL deployment guides

#### Deployment Directory (`deployment/`):
- ✅ Dockerfile and container configs
- ✅ Platform-specific deployment files
- ✅ Infrastructure as code

#### Utils Directory (`utils/`):
- ✅ ONLY shared utilities used by multiple modules
- ✅ Logger, formatters, validators
- ✅ NO business logic or API-specific code

## 🔧 File Creation Rules

### When Creating New Files:

#### Debug/Utility Scripts:
```javascript
// ✅ CORRECT: Create in scripts/
// File: scripts/debug-notion-schema.js
/**
 * Debug Notion Schema Validation
 * 
 * Utility script to validate Notion database schema
 * and check field mappings.
 */
```

#### Test Files:
```javascript
// ✅ CORRECT: Create in tests/
// File: tests/spotify-auth.test.js
/**
 * Spotify Authentication Tests
 * 
 * Integration tests for Spotify OAuth flow
 * and token management.
 */
```

#### Documentation:
```markdown
<!-- ✅ CORRECT: Create in docs/ -->
<!-- File: docs/troubleshooting.md -->
# Troubleshooting Guide

Common issues and solutions...
```

#### Core Application:
```javascript
// ✅ CORRECT: Core logic in root
// File: appleMusicV2Client.js (hypothetical)
/**
 * Apple Music API Client V2
 * 
 * Enhanced Apple Music API integration with improved
 * error handling and metadata processing.
 */
```

## 🧹 File Maintenance Rules

### Automatic Cleanup Requirements:
- ✅ Remove any temporary files immediately after use
- ✅ Move misplaced files to correct directories
- ✅ Update documentation when structure changes
- ✅ Keep directory README files current

### File Naming Conventions:
- ✅ API clients: `servicenameClient.js` (camelCase)
- ✅ Core modules: `camelCase.js`
- ✅ Scripts: `kebab-case.js` or `descriptive-name.js`
- ✅ Tests: `module-name.test.js`
- ✅ Docs: `kebab-case.md`

## 🔍 Code Organization Rules

### Import Path Standards:
```javascript
// ✅ CORRECT: Relative imports from organized structure
const config = require('./config');                    // Root to root
const logger = require('./utils/logger');              // Root to utils
const debugConfig = require('./scripts/debug-config'); // Root to scripts

// ✅ CORRECT: From scripts/
const config = require('../config');                   // Scripts to root
const logger = require('../utils/logger');             // Scripts to utils

// ✅ CORRECT: From tests/
const spotifyClient = require('../spotifyClient');     // Tests to root
const logger = require('../utils/logger');             // Tests to utils
```

### Module Responsibilities:
- ✅ `*Client.js`: ONLY API calls and service-specific auth
- ✅ `config.js`: ONLY environment variable access
- ✅ `utils/`: ONLY shared, reusable utilities
- ✅ `scripts/`: ONLY one-off utilities and debugging
- ✅ `tests/`: ONLY testing code and fixtures

## 📝 Documentation Requirements

### Required Documentation Updates:
- ✅ Update `docs/project-structure.md` when adding directories
- ✅ Update individual README files when adding scripts
- ✅ Document new file purposes in file headers
- ✅ Keep main README.md focused on high-level overview

### File Header Requirements:
```javascript
/**
 * [File Purpose in One Line]
 * 
 * [Detailed description of what this file does]
 * 
 * Dependencies: [list key dependencies]
 * Location Rationale: [why this file is in this directory]
 */
```

## 🚨 Enforcement Rules

### Before Creating Any File:
1. ✅ Determine correct directory based on file purpose
2. ✅ Check if similar functionality already exists
3. ✅ Follow naming conventions
4. ✅ Add proper file header documentation
5. ✅ Update relevant README if needed

### Before Moving Files:
1. ✅ Verify no import dependencies will break
2. ✅ Update any affected documentation
3. ✅ Test that functionality still works
4. ✅ Update related README files

### Regular Maintenance:
- ✅ Review root directory monthly for misplaced files
- ✅ Ensure no business logic creeps into utils/
- ✅ Keep scripts/ organized and documented
- ✅ Remove obsolete files promptly

## 🎯 Goals of This Structure

### Maintainability:
- Clear separation of concerns
- Predictable file locations
- Minimal cognitive load for navigation

### Scalability:
- Room for growth in each category
- Consistent patterns for new features
- Isolated changes to minimize impact

### Developer Experience:
- Quick file discovery
- Logical organization
- Self-documenting structure

---

**REMEMBER: This structure exists to make the codebase more maintainable and professional. Always follow these rules when creating, moving, or organizing files.**