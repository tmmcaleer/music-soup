# Cursor Rules for Music Soup - Playlist Sync Automation

## 🎯 Project Overview
This is a Node.js automation that syncs Apple Music and Spotify playlists into a Notion database. All code should align with the PRD requirements for flexibility, modularity, and API safety.

## 📁 Required Directory Structure
Enforce the following project organization:

```
/
├── config.js                 # Centralized environment variable access
├── endpoints.js              # All API endpoint constants
├── schema.js                 # Notion schema and response field definitions
├── spotifyClient.js          # Spotify API integration only
├── appleMusicClient.js       # Apple Music API integration only
├── notionClient.js           # Notion API integration only
├── utils/
│   ├── logger.js            # Central logging with levels (info, warn, error)
│   └── [other helpers]      # Shared utilities (deduplication, date formatting, etc.)
├── tests/
│   ├── spotify.test.js      # Integration test stubs for Spotify
│   ├── appleMusic.test.js   # Integration test stubs for Apple Music
│   └── notion.test.js       # Integration test stubs for Notion
├── scripts/
│   └── [utility scripts]   # One-off helpers (token generation, etc.)
└── .github/workflows/       # GitHub Actions workflows
```

## 🔐 Secrets Management Rules

### FORBIDDEN:
- ❌ Hardcoding API keys, tokens, or private keys anywhere in code
- ❌ Direct `process.env` calls outside of `config.js`
- ❌ Committing sensitive values to Git

### REQUIRED:
- ✅ All environment variables MUST be accessed through `config.js`
- ✅ Sensitive values MUST come from `.env` or GitHub Secrets
- ✅ Private keys must preserve line breaks and proper formatting
- ✅ Example `.env` template in README.md (with fake values)

## 🌐 API Safety & Anti-Hallucination Rules

### Endpoint Validation:
- ✅ ALL API endpoints MUST match official documentation:
  - Spotify: https://developer.spotify.com/documentation/web-api/
  - Apple Music: https://developer.apple.com/documentation/applemusicapi/
  - Notion: https://developers.notion.com/reference/
- ✅ Custom endpoints MUST be declared as constants in `endpoints.js`
- ✅ Every external API call MUST include inline comment with link to API docs

### Schema Safety:
- ✅ New Notion fields MUST be explicitly added to `schema.js` first
- ✅ Response parsing MUST reference `schema.js` field definitions
- ✅ Handle missing metadata gracefully (log gaps, don't crash)

### Example Required Format:
```javascript
// Spotify Get Playlist Tracks: https://developer.spotify.com/documentation/web-api/reference/get-playlists-tracks
const response = await fetch(`${ENDPOINTS.SPOTIFY_PLAYLIST_TRACKS}/${playlistId}/tracks`);
```

## 🏗️ Code Organization Rules

### File Responsibilities:
- `spotifyClient.js`: ONLY Spotify API calls and auth
- `appleMusicClient.js`: ONLY Apple Music API calls and auth  
- `notionClient.js`: ONLY Notion API calls and database operations
- `config.js`: ONLY environment variable access and validation
- `endpoints.js`: ONLY API endpoint constants
- `schema.js`: ONLY data structure definitions

### Modularity Requirements:
- ✅ Each API client must be independently testable
- ✅ No cross-dependencies between API clients
- ✅ Shared logic goes in `utils/` directory
- ✅ Each file MUST have a docstring explaining its purpose

## 🛡️ Error Handling & Logging

### Required Patterns:
- ✅ Every API call MUST include try-catch with specific error messages
- ✅ All logging MUST go through `utils/logger.js` with proper levels
- ✅ Rate limiting and retry logic for external APIs
- ✅ Graceful degradation when metadata is missing

### Example Required Format:
```javascript
try {
  // Spotify Get Track: https://developer.spotify.com/documentation/web-api/reference/get-track
  const response = await spotifyRequest(url);
  logger.info(`Successfully fetched track: ${trackId}`);
} catch (error) {
  logger.error(`Failed to fetch Spotify track ${trackId}: ${error.message}`);
  // Handle gracefully - don't crash the sync
}
```

## 📊 PRD Alignment Reminders

### Data Handling:
- ✅ Notion URL field stores BOTH Spotify AND Apple Music URLs in same property
- ✅ Use ISRC as primary key for deduplication when available
- ✅ Handle incomplete metadata mappings between services
- ✅ Preserve flexibility for future metadata enrichment

### Workflow Requirements:
- ✅ Support serverless execution via GitHub Actions
- ✅ Allow manual tagging in Notion (don't overwrite human-added fields)
- ✅ Log sync summaries and metadata gaps for monitoring

## 🧪 Testing Requirements

### Test Structure:
- ✅ Integration test stubs MUST exist for each API client
- ✅ Tests should verify auth flows and basic data retrieval
- ✅ Mock external API calls to avoid hitting rate limits
- ✅ Test error handling scenarios

## 📝 Documentation Requirements

### File Documentation:
- ✅ Every file MUST start with a docstring explaining its purpose
- ✅ Complex functions MUST have JSDoc comments
- ✅ README.md MUST include setup instructions and example `.env`

### Example Required Docstring:
```javascript
/**
 * Spotify API Client
 * 
 * Handles all Spotify Web API interactions including authentication,
 * playlist fetching, and track metadata retrieval.
 * 
 * Dependencies: config.js for credentials, utils/logger.js for logging
 * API Docs: https://developer.spotify.com/documentation/web-api/
 */
```

## 🚀 GitHub Actions Requirements

### Workflow Organization:
- ✅ All workflows MUST be in `.github/workflows/`
- ✅ Secrets MUST be loaded from GitHub Secrets, not hardcoded
- ✅ Include error notifications and run summaries
- ✅ Support manual triggers for testing

## ⚡ Performance & Reliability

### Required Patterns:
- ✅ Implement exponential backoff for API retries
- ✅ Batch operations where possible to respect rate limits
- ✅ Cache tokens and refresh only when necessary
- ✅ Graceful handling of API downtime

## 🎵 Music-Specific Considerations

### Apple Music Specifics:
- ✅ Handle both Developer Token and Music User Token requirements
- ✅ Include storefront parameter in all requests
- ✅ Parse playlist URLs correctly for playlist IDs

### Spotify Specifics:
- ✅ Implement OAuth refresh token flow
- ✅ Handle pagination for large playlists
- ✅ Extract playlist IDs from Spotify URLs correctly

### Cross-Platform:
- ✅ Normalize metadata schemas between services
- ✅ Handle different field names gracefully (e.g., Composer vs Artist)
- ✅ Store both service URLs in same Notion field

---

Remember: This automation should be robust enough to run unattended while flexible enough to handle the quirks of music metadata across different platforms.
