name: Music Soup Sync

on:
  # Manual trigger from GitHub UI
  workflow_dispatch:
  
  # Webhook trigger from Notion button
  repository_dispatch:
    types: [notion-sync]
  
  # Scheduled sync disabled - will use webhook triggers instead
  # schedule:
  #   - cron: '*/5 * * * *'

jobs:
  sync-playlists:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run playlist sync
      id: sync_step
      env:
        # Notion Configuration
        NOTION_KEY: ${{ secrets.NOTION_KEY }}
        NOTION_DB_ID: ${{ secrets.NOTION_DB_ID }}
        
        # Spotify Configuration  
        SPOTIFY_CLIENT_ID: ${{ secrets.SPOTIFY_CLIENT_ID }}
        SPOTIFY_CLIENT_SECRET: ${{ secrets.SPOTIFY_CLIENT_SECRET }}
        SPOTIFY_REFRESH_TOKEN: ${{ secrets.SPOTIFY_REFRESH_TOKEN }}
        SPOTIFY_SOURCE_PLAYLIST_ID: ${{ secrets.SPOTIFY_SOURCE_PLAYLIST_ID }}
        SPOTIFY_TEMP_PLAYLIST_ID: ${{ secrets.SPOTIFY_TEMP_PLAYLIST_ID }}
        
        # Apple Music Configuration
        APPLE_MUSIC_TEAM_ID: ${{ secrets.APPLE_MUSIC_TEAM_ID }}
        APPLE_MUSIC_KEY_ID: ${{ secrets.APPLE_MUSIC_KEY_ID }}
        APPLE_MUSIC_PRIVATE_KEY: ${{ secrets.APPLE_MUSIC_PRIVATE_KEY }}
        APPLE_MUSIC_USER_TOKEN: ${{ secrets.APPLE_MUSIC_USER_TOKEN }}
        APPLE_MUSIC_SOURCE_PLAYLIST_ID: ${{ secrets.APPLE_MUSIC_SOURCE_PLAYLIST_ID }}
        APPLE_MUSIC_TEMP_PLAYLIST_ID: ${{ secrets.APPLE_MUSIC_TEMP_PLAYLIST_ID }}
        APPLE_MUSIC_STOREFRONT: ${{ secrets.APPLE_MUSIC_STOREFRONT }}
        
        # General Configuration
        SYNC_INTERVAL_MINUTES: 5
        LOG_LEVEL: info
        DRY_RUN: false
      run: |
        echo "ðŸŽµ Starting Music Soup sync..."
        # Capture output and check for token errors
        if ! node sync.js 2>&1 | tee sync_output.log; then
          # Check if it's a token error
          if grep -q "invalid_grant\|Refresh token revoked\|Token refresh failed" sync_output.log; then
            echo "TOKEN_ERROR=true" >> $GITHUB_OUTPUT
            echo "ðŸš¨ Token refresh error detected!"
          fi
          exit 1
        fi
        echo "âœ… Sync completed successfully!"
        
    - name: Send token refresh alert email
      if: steps.sync_step.outputs.TOKEN_ERROR == 'true'
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.ALERT_EMAIL_USERNAME }}
        password: ${{ secrets.ALERT_EMAIL_PASSWORD }}
        subject: "ðŸš¨ Music Soup: Spotify Token Needs Refresh"
        to: ${{ secrets.ALERT_EMAIL_TO }}
        from: Music Soup Automation <${{ secrets.ALERT_EMAIL_USERNAME }}>
        body: |
          Hi Tim,
          
          Your Music Soup automation detected that the Spotify refresh token has expired and needs to be updated.
          
          ðŸ”§ To fix this:
          1. Run: node scripts/get-spotify-token.js
          2. Update GitHub secret: SPOTIFY_REFRESH_TOKEN
          
          ðŸ“Š Error Details:
          - Workflow: ${{ github.workflow }}
          - Run: ${{ github.run_id }}
          - Time: ${{ github.event.head_commit.timestamp }}
          
          View logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          ðŸŽµ Music Soup Automation
        
    - name: Post sync summary
      if: always()
      run: |
        echo "ðŸ“Š Sync job finished with status: ${{ job.status }}"
        if [[ "${{ steps.sync_step.outputs.TOKEN_ERROR }}" == "true" ]]; then
          echo "ðŸš¨ Token refresh alert sent!"
        fi
